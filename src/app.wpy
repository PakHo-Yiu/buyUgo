<style lang="less">
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'
import '@/baseAPI.js'

export default class extends wepy.app {
  config = {
    pages: [
      'pages/tabs/home',
      'pages/tabs/cates',
      'pages/tabs/search',
      'pages/tabs/cart',
      'pages/tabs/me',
      // 商品详情
      'pages/goods_detail/main',
      // 商品列表
      'pages/goods_list',
      // 订单页面
      'pages/order',
      // 订单列表
      'pages/orderlist'
    ],
    window: {
      //分享按钮等组件背景色
      backgroundTextStyle: 'dark',
      //导航栏背景色
      navigationBarBackgroundColor: '#D81E06',
      //导航栏文本标题
      navigationBarTitleText: '黑马优购',
      //导航栏文本颜色
      navigationBarTextStyle: 'white'
    },
    tabBar:{
      //选中的文本颜色
      selectedColor: '#D81E06',
      // tabBar配置参数
      list:[{
        //页面路径
        pagePath:'pages/tabs/home',
        //导航条文本
        text:'首页',
        //默认icon路径
        iconPath:'/assets/icons/home.png',
        //选中的icon路径
        selectedIconPath:'/assets/icons/home-active.png'
      },{
        pagePath:'pages/tabs/cates',
        text:'分类',
        iconPath:'/assets/icons/cates.png',
        selectedIconPath:'/assets/icons/cates-active.png'
      },{
        pagePath:'pages/tabs/search',
        text:'搜索',
        iconPath:'/assets/icons/search.png',
        selectedIconPath:'/assets/icons/search-active.png'
      },{
        pagePath:'pages/tabs/cart',
        text:'购物车',
        iconPath:'/assets/icons/cart.png',
        selectedIconPath:'/assets/icons/cart-active.png'
      },{
        pagePath:'pages/tabs/me',
        text:'我的',
        iconPath:'/assets/icons/my.png',
        selectedIconPath:'/assets/icons/my-active.png'
      }]
    },
    // 引用注册组件
    usingComponents: {
      // 分类导航组件
      "van-sidebar": "./assets/vant/sidebar/index",
      "van-sidebar-item": "./assets/vant/sidebar-item/index",
      // 布局相关组件
      "van-row": "./assets/vant/row/index",
      "van-col": "./assets/vant/col/index",
      // 搜索组件
      "van-search": "./assets/vant/search/index",
      // 单元格组件
      "van-cell": "./assets/vant/cell/index",
      "van-cell-group": "./assets/vant/cell-group/index",
      // icon组件
      "van-icon": "./assets/vant/icon/index",
      // tag组件
      "van-tag": "./assets/vant/tag/index",
      // 商品卡片组件
      "van-card": "./assets/vant/card/index",
      // tab组件
      "van-tab": "./assets/vant/tab/index",
      "van-tabs": "./assets/vant/tabs/index",
      // 把html代码转换为wxml代码插件
      wxparse: './assets/wxparse/wxparse',
      // 商品导航组件
      "van-goods-action": "./assets/vant/goods-action/index",
      "van-goods-action-icon": "./assets/vant/goods-action-icon/index",
      "van-goods-action-button": "./assets/vant/goods-action-button/index",
      // 步进器组件
      "van-stepper": "./assets/vant/stepper/index",
      // 复选框组件
      "van-checkbox": "./assets/vant/checkbox/index",
      // 滑动效果组件
      "van-swipe-cell": "./assets/vant/swipe-cell/index",
      // 提交订单组件
      "van-submit-bar": "./assets/vant/submit-bar/index",
      // 按钮组件
      "van-button": "./assets/vant/button/index",
      // 面板组件
      "van-panel": "./assets/vant/panel/index"
    }
  }

  // 存储全局共享的数据
  // 只需要通过this.$parent.globalData访问
  globalData = {
    // 全局购物车列表
    cart: [],
    // 当前购物车中已经勾选的数量
    total: 0
  }

  // 把商品添加到购物车列表中
  addGoodsToCart(goods) {
    // 判断商品是否已存在购物车
    const i = this.globalData.cart.findIndex(x =>x.id === goods.goods_id)
    if(i !== -1) {
      this.globalData.cart[i].count++
      this.saveCartToStorage()
      return
    }

    const info = {
      // 商品ID
      id: goods.goods_id,
      // 商品名字
      name: goods.goods_name,
      // 图片
      pic: goods.goods_small_logo,
      // 价格
      price: goods.goods_price,
      // 数量
      count: 1,
      // 是否选中
      isCheck: true
    }
    this.globalData.cart.push(info)
    this.saveCartToStorage()
    console.log(this.globalData.cart)
  }

  // 更新商品的数量
  updateGoodsCount(id, count) {
    const i = this.globalData.cart.findIndex(x => x.id === id)
    if(i !== -1) {
      this.globalData.cart[i].count = count
      this.saveCartToStorage()
    }
  }

  // 更新商品的选中状态
  updateGoodsStatus(id, status) {
    const i = this.globalData.cart.findIndex(x => x.id === id)
    if(i !== -1) {
      this.globalData.cart[i].isCheck = status
      this.saveCartToStorage()
    }
  }

  // 修改购物车中商品的选中状态
  updateAllGoodsStatus(status) {
    this.globalData.cart.forEach(x => {
      x.isCheck = status
    })
    this.saveCartToStorage()
  }
  // 移除商品
  removeGoodsById(id) {
    const i = this.globalData.cart.findIndex(x => x.id === id)
    if(i !== -1) {
      this.globalData.cart.splice(i, 1)
      this.saveCartToStorage()
    }
  }

  // 将购物车中的商品数据,持久化保存到本地
  saveCartToStorage() {
    wepy.setStorageSync('cart',this.globalData.cart)
    this.renderCartBadge()
  }

  // 渲染购物车徽章
  async renderCartBadge() {
    let c = 0
    this.globalData.cart.forEach(x => {
      if (x.isCheck) {
        c += x.count
      }
    })
    
    // 更新全局的商品数量
    this.globalData.total = c

    const res = await wepy.setTabBarBadge({
      index: 3,
      text: c + ''
    }).catch(err =>err)

    if(res.errMsg !== 'setTabBarBadge:ok') {
    }
  }

  constructor () {
    super()
    this.use('requestfix')
    // 可以为异步的API,开启Promise功能,使得异步API调用的结果,返回值是Promise对象
    this.use('promisify')
    // 拦截器
    this.intercept('request', {
      // 发出请求时的回调函数
      config (p) {
        // 显示loading
        wepy.showLoading({
          title: '数据加载中...'
        })

        p.header = {
          Authorization: wepy.getStorageSync('token')
        }
        console.log(p)
        // 必须返回OBJECT参数对象，否则无法发送请求到服务端
        return p;
      },

      // 请求成功后的回调函数
      success (p) {
        // 可以在这里对收到的响应数据对象进行加工处理
        // 必须返回响应数据对象，否则后续无法对响应数据进行处理
        return p;
      },

      // 请求失败后的回调函数
      fail (p) {
        // 必须返回响应数据对象，否则后续无法对响应数据进行处理
        return p;
      },

      // 请求完成时的回调函数(请求成功或失败都会被执行)
      complete (p) {
        wepy.hideLoading()
      }
    })
  }

  onLaunch() {
    console.log('小程序启动了')
    this.globalData.cart = wepy.getStorageSync('cart') || []
    this.renderCartBadge()
  }
}
</script>
